plugins {
    id 'application'
    id 'org.gradlex.extra-java-module-info' version '1.7'
    id 'com.github.iherasymenko.jlink' version '0.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

application {
    mainClass = 'com.example.demo.DemoApplication'
    mainModule = 'demo.main'
}

jlinkApplication {
    addModules = ['mysql.connector.j']
    noHeaderFiles = true
    noManPages = true
}

jlinkImages {
    linuxX64 {
        group = 'com.azul.cdn'
        jdkArchive = 'zulu21.32.17-ca-jdk21.0.2-linux_x64.zip'
    }
    winX64 {
        group = 'com.azul.cdn'
        jdkArchive = 'zulu21.32.17-ca-jdk21.0.2-win_x64.zip'
    }
    macosxX64 {
        group = 'com.azul.cdn'
        jdkArchive = 'zulu21.32.17-ca-jdk21.0.2-macosx_x64.tar.gz'
    }
    macosxAarch64 {
        group = 'com.azul.cdn'
        jdkArchive = 'zulu21.32.17-ca-jdk21.0.2-macosx_aarch64.tar.gz'
    }
}

dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.2.1')
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'com.mysql:mysql-connector-j'
}

tasks.withType(JavaCompile).configureEach { task ->
    task.options.release = 21
    task.options.compilerArgs += '-parameters'
}

extraJavaModuleInfo {
    failOnAutomaticModules = true
    module("org.apache.tomcat.embed:tomcat-embed-core", "org.apache.tomcat.embed.core") {
        patchRealModule()

        requires("java.desktop")
        requires("java.instrument")
        requires("java.logging")
        requires("java.rmi")

        requiresStatic("jakarta.ejb")
        requiresStatic("jakarta.mail")
        requiresStatic("jakarta.persistence")
        requiresStatic("jakarta.xml.ws")
        requiresStatic("java.xml.ws")

        requiresTransitive("jakarta.annotation")
        requiresTransitive("java.management")
        requiresTransitive("java.naming")
        requiresTransitive("java.security.jgss")
        requiresTransitive("java.sql")
        requiresTransitive("java.xml")

        exports("jakarta.security.auth.message")
        exports("jakarta.security.auth.message.callback")
        exports("jakarta.security.auth.message.config")
        exports("jakarta.security.auth.message.module")
        exports("jakarta.servlet")
        exports("jakarta.servlet.annotation")
        exports("jakarta.servlet.descriptor")
        exports("jakarta.servlet.http")
        exports("jakarta.servlet.resources")
        exports("org.apache.catalina")
        exports("org.apache.catalina.authenticator")
        exports("org.apache.catalina.authenticator.jaspic")
        exports("org.apache.catalina.connector")
        exports("org.apache.catalina.core")
        exports("org.apache.catalina.deploy")
        exports("org.apache.catalina.filters")
        exports("org.apache.catalina.loader")
        exports("org.apache.catalina.manager")
        exports("org.apache.catalina.manager.host")
        exports("org.apache.catalina.manager.util")
        exports("org.apache.catalina.mapper")
        exports("org.apache.catalina.mbeans")
        exports("org.apache.catalina.realm")
        exports("org.apache.catalina.security")
        exports("org.apache.catalina.servlets")
        exports("org.apache.catalina.session")
        // exports("org.apache.catalina.ssi") does not exist in the JAR
        exports("org.apache.catalina.startup")
        exports("org.apache.catalina.users")
        exports("org.apache.catalina.util")
        exports("org.apache.catalina.valves")
        exports("org.apache.catalina.valves.rewrite")
        exports("org.apache.catalina.webresources")
        exports("org.apache.catalina.webresources.war")
        exports("org.apache.coyote")
        exports("org.apache.coyote.ajp")
        exports("org.apache.coyote.http11")
        exports("org.apache.coyote.http11.filters")
        exports("org.apache.coyote.http11.upgrade")
        exports("org.apache.coyote.http2")
        exports("org.apache.juli")
        exports("org.apache.juli.logging")
        exports("org.apache.naming")
        exports("org.apache.naming.factory")
        exports("org.apache.naming.java")
        exports("org.apache.tomcat")
        exports("org.apache.tomcat.jni")
        exports("org.apache.tomcat.util")
        exports("org.apache.tomcat.util.bcel.classfile")
        exports("org.apache.tomcat.util.buf")
        exports("org.apache.tomcat.util.codec.binary")
        exports("org.apache.tomcat.util.collections")
        exports("org.apache.tomcat.util.compat")
        exports("org.apache.tomcat.util.descriptor")
        exports("org.apache.tomcat.util.descriptor.tagplugin")
        exports("org.apache.tomcat.util.descriptor.web")
        exports("org.apache.tomcat.util.digester")
        exports("org.apache.tomcat.util.file")
        exports("org.apache.tomcat.util.http")
        exports("org.apache.tomcat.util.http.fileupload")
        exports("org.apache.tomcat.util.http.fileupload.disk")
        exports("org.apache.tomcat.util.http.fileupload.impl")
        exports("org.apache.tomcat.util.http.fileupload.servlet")
        exports("org.apache.tomcat.util.http.fileupload.util")
        exports("org.apache.tomcat.util.http.parser")
        exports("org.apache.tomcat.util.log")
        exports("org.apache.tomcat.util.modeler")
        exports("org.apache.tomcat.util.modeler.modules")
        exports("org.apache.tomcat.util.net")
        exports("org.apache.tomcat.util.net.openssl")
        exports("org.apache.tomcat.util.net.openssl.ciphers")
        exports("org.apache.tomcat.util.res")
        exports("org.apache.tomcat.util.scan")
        exports("org.apache.tomcat.util.security")
        exports("org.apache.tomcat.util.threads")

        uses("org.apache.juli.logging.Log")
    }
    module("org.apache.logging.log4j:log4j-api", "org.apache.logging.log4j") {
        patchRealModule() // Refer to the commit message for details
        closeModule()
        requiresStatic("java.management")
        requiresStatic("java.sql")
        requiresStatic("org.osgi.core")
        exports("org.apache.logging.log4j")
        exports("org.apache.logging.log4j.message")
        exports("org.apache.logging.log4j.simple")
        exports("org.apache.logging.log4j.spi")
        exports("org.apache.logging.log4j.status")
        exports("org.apache.logging.log4j.util")
        uses('org.apache.logging.log4j.message.ThreadDumpMessage$ThreadInfoFactory')
        uses("org.apache.logging.log4j.spi.Provider")
        uses("org.apache.logging.log4j.util.PropertySource")
    }
    module("com.mysql:mysql-connector-j", "mysql.connector.j") {
        closeModule()
        requiresTransitive("java.sql")
        requires("jdk.crypto.ec")
        exports("com.mysql.cj.jdbc")
    }
    module("io.micrometer:micrometer-commons", "micrometer.commons") {
        closeModule()
        requires("java.logging")
        requires("org.slf4j")
        exports("io.micrometer.common")
        exports("io.micrometer.common.annotation")
        exports("io.micrometer.common.docs")
        exports("io.micrometer.common.lang")
        exports("io.micrometer.common.util")
        exports("io.micrometer.common.util.internal.logging")
    }
    module("io.micrometer:micrometer-observation", "micrometer.observation") {
        closeModule()
        requiresTransitive("micrometer.commons")
        exports("io.micrometer.observation")
        exports("io.micrometer.observation.annotation")
        exports("io.micrometer.observation.aop")
        exports("io.micrometer.observation.contextpropagation")
        exports("io.micrometer.observation.docs")
        exports("io.micrometer.observation.transport")
        ignoreServiceProvider("io.micrometer.context.ThreadLocalAccessor")
    }
    module("org.springframework:spring-aop", "spring.aop") {
        closeModule()
        requiresTransitive("java.xml")
        requiresTransitive("spring.beans")
        requiresTransitive("spring.core")
        requiresTransitive("spring.jcl")
        requires("java.compiler")
        exports("org.aopalliance.aop")
        exports("org.aopalliance.intercept")
        exports("org.springframework.aop")
        exports("org.springframework.aop.aspectj")
        exports("org.springframework.aop.aspectj.annotation")
        exports("org.springframework.aop.aspectj.autoproxy")
        exports("org.springframework.aop.config")
        exports("org.springframework.aop.framework")
        exports("org.springframework.aop.framework.adapter")
        exports("org.springframework.aop.framework.autoproxy")
        exports("org.springframework.aop.framework.autoproxy.target")
        exports("org.springframework.aop.interceptor")
        exports("org.springframework.aop.scope")
        exports("org.springframework.aop.support")
        exports("org.springframework.aop.support.annotation")
        exports("org.springframework.aop.target")
        exports("org.springframework.aop.target.dynamic")
    }
    module("org.springframework:spring-beans", "spring.beans") {
        closeModule()
        requiresTransitive("java.desktop")
        requiresTransitive("java.prefs")
        requiresTransitive("java.xml")
        requiresTransitive("org.yaml.snakeyaml")
        requiresTransitive("spring.core")
        requiresTransitive("spring.jcl")
        requires("java.compiler")
        exports("org.springframework.beans")
        exports("org.springframework.beans.factory")
        exports("org.springframework.beans.factory.annotation")
        exports("org.springframework.beans.factory.aot")
        exports("org.springframework.beans.factory.config")
        exports("org.springframework.beans.factory.groovy")
        exports("org.springframework.beans.factory.parsing")
        exports("org.springframework.beans.factory.serviceloader")
        exports("org.springframework.beans.factory.support")
        exports("org.springframework.beans.factory.wiring")
        exports("org.springframework.beans.factory.xml")
        exports("org.springframework.beans.propertyeditors")
        exports("org.springframework.beans.support")
    }
    module("org.springframework:spring-context", "spring.context") {
        closeModule()
        requiresTransitive("java.desktop")
        requiresTransitive("java.instrument")
        requiresTransitive("java.management")
        requiresTransitive("java.naming")
        requiresTransitive("java.scripting")
        requiresTransitive("java.xml")
        requiresTransitive("micrometer.commons")
        requiresTransitive("micrometer.observation")
        requiresTransitive("spring.aop")
        requiresTransitive("spring.beans")
        requiresTransitive("spring.core")
        requiresTransitive("spring.expression")
        requiresTransitive("spring.jcl")
        requires("jakarta.annotation")
        requires("java.compiler")
        exports("org.springframework.cache")
        exports("org.springframework.cache.annotation")
        exports("org.springframework.cache.concurrent")
        exports("org.springframework.cache.config")
        exports("org.springframework.cache.interceptor")
        exports("org.springframework.cache.support")
        exports("org.springframework.context")
        exports("org.springframework.context.annotation")
        exports("org.springframework.context.aot")
        exports("org.springframework.context.config")
        exports("org.springframework.context.event")
        exports("org.springframework.context.expression")
        exports("org.springframework.context.i18n")
        exports("org.springframework.context.index")
        exports("org.springframework.context.support")
        exports("org.springframework.context.weaving")
        exports("org.springframework.ejb.config")
        exports("org.springframework.format")
        exports("org.springframework.format.annotation")
        exports("org.springframework.format.datetime")
        exports("org.springframework.format.datetime.standard")
        exports("org.springframework.format.number")
        exports("org.springframework.format.number.money")
        exports("org.springframework.format.support")
        exports("org.springframework.instrument.classloading")
        exports("org.springframework.instrument.classloading.glassfish")
        exports("org.springframework.instrument.classloading.jboss")
        exports("org.springframework.instrument.classloading.tomcat")
        exports("org.springframework.jmx")
        exports("org.springframework.jmx.access")
        exports("org.springframework.jmx.export")
        exports("org.springframework.jmx.export.annotation")
        exports("org.springframework.jmx.export.assembler")
        exports("org.springframework.jmx.export.metadata")
        exports("org.springframework.jmx.export.naming")
        exports("org.springframework.jmx.export.notification")
        exports("org.springframework.jmx.support")
        exports("org.springframework.jndi")
        exports("org.springframework.jndi.support")
        exports("org.springframework.scheduling")
        exports("org.springframework.scheduling.annotation")
        exports("org.springframework.scheduling.concurrent")
        exports("org.springframework.scheduling.config")
        exports("org.springframework.scheduling.support")
        exports("org.springframework.scripting")
        exports("org.springframework.scripting.bsh")
        exports("org.springframework.scripting.config")
        exports("org.springframework.scripting.groovy")
        exports("org.springframework.scripting.support")
        exports("org.springframework.stereotype")
        exports("org.springframework.ui")
        exports("org.springframework.ui.context")
        exports("org.springframework.ui.context.support")
        exports("org.springframework.validation")
        exports("org.springframework.validation.annotation")
        exports("org.springframework.validation.beanvalidation")
        exports("org.springframework.validation.method")
        exports("org.springframework.validation.support")
    }
    module("org.springframework:spring-core", "spring.core") {
        closeModule()
        requiresTransitive("java.compiler")
        requiresTransitive("java.desktop")
        requiresTransitive("java.xml")
        requiresTransitive("jdk.unsupported")
        requiresTransitive("spring.jcl")
        requires("jdk.jfr")
        exports("org.springframework.aot")
        exports("org.springframework.aot.generate")
        exports("org.springframework.aot.hint")
        exports("org.springframework.aot.hint.annotation")
        exports("org.springframework.aot.hint.predicate")
        exports("org.springframework.aot.hint.support")
        exports("org.springframework.aot.nativex")
        exports("org.springframework.aot.nativex.feature")
        exports("org.springframework.aot.nativex.substitution")
        exports("org.springframework.asm")
        exports("org.springframework.cglib")
        exports("org.springframework.cglib.beans")
        exports("org.springframework.cglib.core")
        exports("org.springframework.cglib.core.internal")
        exports("org.springframework.cglib.proxy")
        exports("org.springframework.cglib.reflect")
        exports("org.springframework.cglib.transform")
        exports("org.springframework.cglib.transform.impl")
        exports("org.springframework.cglib.util")
        exports("org.springframework.core")
        exports("org.springframework.core.annotation")
        exports("org.springframework.core.codec")
        exports("org.springframework.core.convert")
        exports("org.springframework.core.convert.converter")
        exports("org.springframework.core.convert.support")
        exports("org.springframework.core.env")
        exports("org.springframework.core.io")
        exports("org.springframework.core.io.buffer")
        exports("org.springframework.core.io.support")
        exports("org.springframework.core.log")
        exports("org.springframework.core.metrics")
        exports("org.springframework.core.metrics.jfr")
        exports("org.springframework.core.serializer")
        exports("org.springframework.core.serializer.support")
        exports("org.springframework.core.style")
        exports("org.springframework.core.task")
        exports("org.springframework.core.task.support")
        exports("org.springframework.core.type")
        exports("org.springframework.core.type.classreading")
        exports("org.springframework.core.type.filter")
        exports("org.springframework.javapoet")
        exports("org.springframework.lang")
        exports("org.springframework.objenesis")
        exports("org.springframework.objenesis.instantiator")
        exports("org.springframework.objenesis.instantiator.android")
        exports("org.springframework.objenesis.instantiator.annotations")
        exports("org.springframework.objenesis.instantiator.basic")
        exports("org.springframework.objenesis.instantiator.gcj")
        exports("org.springframework.objenesis.instantiator.perc")
        exports("org.springframework.objenesis.instantiator.sun")
        exports("org.springframework.objenesis.instantiator.util")
        exports("org.springframework.objenesis.strategy")
        exports("org.springframework.util")
        exports("org.springframework.util.backoff")
        exports("org.springframework.util.comparator")
        exports("org.springframework.util.concurrent")
        exports("org.springframework.util.function")
        exports("org.springframework.util.unit")
        exports("org.springframework.util.xml")
        ignoreServiceProvider("reactor.blockhound.integration.BlockHoundIntegration")
    }
    module("org.springframework:spring-expression", "spring.expression") {
        closeModule()
        requiresTransitive("spring.core")
        requires("spring.jcl")
        exports("org.springframework.expression")
        exports("org.springframework.expression.common")
        exports("org.springframework.expression.spel")
        exports("org.springframework.expression.spel.ast")
        exports("org.springframework.expression.spel.standard")
        exports("org.springframework.expression.spel.support")
    }
    module("org.springframework:spring-jcl", "spring.jcl") {
        closeModule()
        requires("java.logging")
        requires("org.apache.logging.log4j")
        requires("org.slf4j")
        exports("org.apache.commons.logging")
        exports("org.apache.commons.logging.impl")
        // ignoreServiceProvider("org.apache.commons.logging.LogFactory")
    }
    module("org.springframework:spring-jdbc", "spring.jdbc") {
        closeModule()
        requiresTransitive("java.desktop")
        requiresTransitive("java.logging")
        requiresTransitive("java.sql")
        requiresTransitive("java.sql.rowset")
        requiresTransitive("java.xml")
        requiresTransitive("spring.beans")
        requiresTransitive("spring.context")
        requiresTransitive("spring.core")
        requiresTransitive("spring.jcl")
        requiresTransitive("spring.tx")
        requires("java.naming")
        exports("org.springframework.jdbc")
        exports("org.springframework.jdbc.config")
        exports("org.springframework.jdbc.core")
        exports("org.springframework.jdbc.core.metadata")
        exports("org.springframework.jdbc.core.namedparam")
        exports("org.springframework.jdbc.core.simple")
        exports("org.springframework.jdbc.core.support")
        exports("org.springframework.jdbc.datasource")
        exports("org.springframework.jdbc.datasource.embedded")
        exports("org.springframework.jdbc.datasource.init")
        exports("org.springframework.jdbc.datasource.lookup")
        exports("org.springframework.jdbc.object")
        exports("org.springframework.jdbc.support")
        exports("org.springframework.jdbc.support.incrementer")
        exports("org.springframework.jdbc.support.lob")
        exports("org.springframework.jdbc.support.rowset")
        exports("org.springframework.jdbc.support.xml")
    }
    module("org.springframework:spring-tx", "spring.tx") {
        closeModule()
        requiresTransitive("java.desktop")
        requiresTransitive("java.transaction.xa")
        requiresTransitive("java.xml")
        requiresTransitive("spring.aop")
        requiresTransitive("spring.beans")
        requiresTransitive("spring.context")
        requiresTransitive("spring.core")
        requiresTransitive("spring.jcl")
        requires("java.naming")
        exports("org.springframework.dao")
        exports("org.springframework.dao.annotation")
        exports("org.springframework.dao.support")
        exports("org.springframework.jca.endpoint")
        exports("org.springframework.jca.support")
        exports("org.springframework.transaction")
        exports("org.springframework.transaction.annotation")
        exports("org.springframework.transaction.config")
        exports("org.springframework.transaction.event")
        exports("org.springframework.transaction.interceptor")
        exports("org.springframework.transaction.jta")
        exports("org.springframework.transaction.reactive")
        exports("org.springframework.transaction.support")
    }
    module("org.springframework:spring-web", "spring.web") {
        closeModule()
        requiresTransitive("com.fasterxml.jackson.annotation")
        requiresTransitive("com.fasterxml.jackson.core")
        requiresTransitive("com.fasterxml.jackson.databind")
        requiresTransitive("java.desktop")
        requiresTransitive("java.net.http")
        requiresTransitive("java.xml")
        requiresTransitive("micrometer.commons")
        requiresTransitive("micrometer.observation")
        requiresTransitive("org.apache.tomcat.embed.core")
        requiresTransitive("org.apache.tomcat.embed.el")
        requiresTransitive("spring.beans")
        requiresTransitive("spring.context")
        requiresTransitive("spring.core")
        requiresTransitive("spring.jcl")
        requires("spring.aop")
        exports("org.springframework.http")
        exports("org.springframework.http.client")
        exports("org.springframework.http.client.observation")
        exports("org.springframework.http.client.reactive")
        exports("org.springframework.http.client.support")
        exports("org.springframework.http.codec")
        exports("org.springframework.http.codec.cbor")
        exports("org.springframework.http.codec.json")
        exports("org.springframework.http.codec.multipart")
        exports("org.springframework.http.codec.protobuf")
        exports("org.springframework.http.codec.support")
        exports("org.springframework.http.codec.xml")
        exports("org.springframework.http.converter")
        exports("org.springframework.http.converter.cbor")
        exports("org.springframework.http.converter.feed")
        exports("org.springframework.http.converter.json")
        exports("org.springframework.http.converter.protobuf")
        exports("org.springframework.http.converter.smile")
        exports("org.springframework.http.converter.support")
        exports("org.springframework.http.converter.xml")
        exports("org.springframework.http.server")
        exports("org.springframework.http.server.observation")
        exports("org.springframework.http.server.reactive")
        exports("org.springframework.http.server.reactive.observation")
        exports("org.springframework.http.support")
        exports("org.springframework.web")
        exports("org.springframework.web.accept")
        exports("org.springframework.web.bind")
        exports("org.springframework.web.bind.annotation")
        exports("org.springframework.web.bind.support")
        exports("org.springframework.web.client")
        exports("org.springframework.web.client.support")
        exports("org.springframework.web.context")
        exports("org.springframework.web.context.annotation")
        exports("org.springframework.web.context.request")
        exports("org.springframework.web.context.request.async")
        exports("org.springframework.web.context.support")
        exports("org.springframework.web.cors")
        exports("org.springframework.web.cors.reactive")
        exports("org.springframework.web.filter")
        exports("org.springframework.web.filter.reactive")
        exports("org.springframework.web.jsf")
        exports("org.springframework.web.jsf.el")
        exports("org.springframework.web.method")
        exports("org.springframework.web.method.annotation")
        exports("org.springframework.web.method.support")
        exports("org.springframework.web.multipart")
        exports("org.springframework.web.multipart.support")
        exports("org.springframework.web.server")
        exports("org.springframework.web.server.adapter")
        exports("org.springframework.web.server.handler")
        exports("org.springframework.web.server.i18n")
        exports("org.springframework.web.server.session")
        exports("org.springframework.web.service")
        exports("org.springframework.web.service.annotation")
        exports("org.springframework.web.service.invoker")
        exports("org.springframework.web.util")
        exports("org.springframework.web.util.pattern")
        // ignoreServiceProvider("jakarta.servlet.ServletContainerInitializer")
        ignoreServiceProvider("reactor.blockhound.integration.BlockHoundIntegration")
    }
    module("org.springframework:spring-webmvc", "spring.webmvc") {
        closeModule()
        requiresTransitive("com.fasterxml.jackson.core")
        requiresTransitive("com.fasterxml.jackson.databind")
        requiresTransitive("java.desktop")
        requiresTransitive("java.scripting")
        requiresTransitive("java.xml")
        requiresTransitive("org.apache.tomcat.embed.core")
        requiresTransitive("spring.beans")
        requiresTransitive("spring.context")
        requiresTransitive("spring.core")
        requiresTransitive("spring.jcl")
        requiresTransitive("spring.web")
        requires("com.fasterxml.jackson.annotation")
        requires("spring.aop")
        requires("spring.expression")
        opens("org.springframework.web.servlet.handler", "spring.core")
        exports("org.springframework.web.servlet")
        exports("org.springframework.web.servlet.config")
        exports("org.springframework.web.servlet.config.annotation")
        exports("org.springframework.web.servlet.function")
        exports("org.springframework.web.servlet.function.support")
        exports("org.springframework.web.servlet.handler")
        exports("org.springframework.web.servlet.i18n")
        exports("org.springframework.web.servlet.mvc")
        exports("org.springframework.web.servlet.mvc.annotation")
        exports("org.springframework.web.servlet.mvc.condition")
        exports("org.springframework.web.servlet.mvc.method")
        exports("org.springframework.web.servlet.mvc.method.annotation")
        exports("org.springframework.web.servlet.mvc.support")
        exports("org.springframework.web.servlet.resource")
        exports("org.springframework.web.servlet.support")
        exports("org.springframework.web.servlet.tags")
        exports("org.springframework.web.servlet.tags.form")
        exports("org.springframework.web.servlet.theme")
        exports("org.springframework.web.servlet.view")
        exports("org.springframework.web.servlet.view.document")
        exports("org.springframework.web.servlet.view.feed")
        exports("org.springframework.web.servlet.view.freemarker")
        exports("org.springframework.web.servlet.view.groovy")
        exports("org.springframework.web.servlet.view.json")
        exports("org.springframework.web.servlet.view.script")
        exports("org.springframework.web.servlet.view.xml")
        exports("org.springframework.web.servlet.view.xslt")
    }
    module("org.springframework.boot:spring-boot", "spring.boot") {
        closeModule()
        requiresTransitive("ch.qos.logback.classic")
        requiresTransitive("ch.qos.logback.core")
        requiresTransitive("com.fasterxml.jackson.core")
        requiresTransitive("com.fasterxml.jackson.databind")
        requiresTransitive("com.zaxxer.hikari")
        requiresTransitive("java.logging")
        requiresTransitive("java.management")
        requiresTransitive("java.sql")
        requiresTransitive("java.xml")
        requiresTransitive("org.apache.logging.log4j")
        requiresTransitive("org.apache.tomcat.embed.core")
        requiresTransitive("spring.beans")
        requiresTransitive("spring.context")
        requiresTransitive("spring.core")
        requiresTransitive("spring.jcl")
        requiresTransitive("spring.jdbc")
        requiresTransitive("spring.tx")
        requiresTransitive("spring.web")
        requiresTransitive("spring.webmvc")
        requires("java.compiler")
        requires("java.desktop")
        requires("java.naming")
        requires("java.net.http")
        requires("jul.to.slf4j")
        requires("org.slf4j")
        requires("org.yaml.snakeyaml")
        requires("spring.aop")
        opens("org.springframework.boot", "spring.core")
        opens("org.springframework.boot.context.event", "spring.core")
        opens("org.springframework.boot.context.properties", "spring.core")
        opens("org.springframework.boot.flyway", "spring.core")
        opens("org.springframework.boot.jdbc", "spring.core")
        opens("org.springframework.boot.jdbc.init", "spring.core")
        opens("org.springframework.boot.jooq", "spring.core")
        opens("org.springframework.boot.liquibase", "spring.core")
        opens("org.springframework.boot.orm.jpa", "spring.core")
        opens("org.springframework.boot.r2dbc.init", "spring.core")
        opens("org.springframework.boot.sql.init.dependency", "spring.core")
        opens("org.springframework.boot.web.reactive.context", "spring.core")
        opens("org.springframework.boot.web.servlet.context", "spring.core")
        exports("org.springframework.boot")
        exports("org.springframework.boot.admin")
        exports("org.springframework.boot.ansi")
        exports("org.springframework.boot.availability")
        exports("org.springframework.boot.builder")
        exports("org.springframework.boot.cloud")
        exports("org.springframework.boot.context")
        exports("org.springframework.boot.context.annotation")
        exports("org.springframework.boot.context.config")
        exports("org.springframework.boot.context.event")
        exports("org.springframework.boot.context.logging")
        exports("org.springframework.boot.context.metrics.buffering")
        exports("org.springframework.boot.context.properties")
        exports("org.springframework.boot.context.properties.bind")
        exports("org.springframework.boot.context.properties.bind.handler")
        exports("org.springframework.boot.context.properties.bind.validation")
        exports("org.springframework.boot.context.properties.source")
        exports("org.springframework.boot.convert")
        exports("org.springframework.boot.diagnostics")
        exports("org.springframework.boot.diagnostics.analyzer")
        exports("org.springframework.boot.env")
        exports("org.springframework.boot.flyway")
        exports("org.springframework.boot.info")
        exports("org.springframework.boot.jackson")
        exports("org.springframework.boot.jdbc")
        exports("org.springframework.boot.jdbc.init")
        exports("org.springframework.boot.jdbc.metadata")
        exports("org.springframework.boot.jms")
        exports("org.springframework.boot.jooq")
        exports("org.springframework.boot.json")
        exports("org.springframework.boot.liquibase")
        exports("org.springframework.boot.logging")
        exports("org.springframework.boot.logging.java")
        exports("org.springframework.boot.logging.log4j2")
        exports("org.springframework.boot.logging.logback")
        exports("org.springframework.boot.origin")
        exports("org.springframework.boot.orm.jpa")
        exports("org.springframework.boot.orm.jpa.hibernate")
        exports("org.springframework.boot.r2dbc")
        exports("org.springframework.boot.r2dbc.init")
        exports("org.springframework.boot.reactor")
        exports("org.springframework.boot.rsocket.context")
        exports("org.springframework.boot.rsocket.messaging")
        exports("org.springframework.boot.rsocket.netty")
        exports("org.springframework.boot.rsocket.server")
        exports("org.springframework.boot.security.reactive")
        exports("org.springframework.boot.security.servlet")
        exports("org.springframework.boot.sql.init")
        exports("org.springframework.boot.sql.init.dependency")
        exports("org.springframework.boot.ssl")
        exports("org.springframework.boot.ssl.jks")
        exports("org.springframework.boot.ssl.pem")
        exports("org.springframework.boot.system")
        exports("org.springframework.boot.task")
        exports("org.springframework.boot.type.classreading")
        exports("org.springframework.boot.util")
        exports("org.springframework.boot.validation")
        exports("org.springframework.boot.validation.beanvalidation")
        exports("org.springframework.boot.web.client")
        exports("org.springframework.boot.web.codec")
        exports("org.springframework.boot.web.context")
        exports("org.springframework.boot.web.embedded.jetty")
        exports("org.springframework.boot.web.embedded.netty")
        exports("org.springframework.boot.web.embedded.tomcat")
        exports("org.springframework.boot.web.embedded.undertow")
        exports("org.springframework.boot.web.error")
        exports("org.springframework.boot.web.reactive.context")
        exports("org.springframework.boot.web.reactive.error")
        exports("org.springframework.boot.web.reactive.filter")
        exports("org.springframework.boot.web.reactive.function.client")
        exports("org.springframework.boot.web.reactive.result.view")
        exports("org.springframework.boot.web.reactive.server")
        exports("org.springframework.boot.web.server")
        exports("org.springframework.boot.web.servlet")
        exports("org.springframework.boot.web.servlet.context")
        exports("org.springframework.boot.web.servlet.error")
        exports("org.springframework.boot.web.servlet.filter")
        exports("org.springframework.boot.web.servlet.server")
        exports("org.springframework.boot.web.servlet.support")
        exports("org.springframework.boot.web.servlet.view")
        exports("org.springframework.boot.webservices.client")
        // ignoreServiceProvider("ch.qos.logback.classic.spi.Configurator")
        // ignoreServiceProvider("org.apache.logging.log4j.util.PropertySource")
    }
    module("org.springframework.boot:spring-boot-autoconfigure", "spring.boot.autoconfigure") {
        closeModule()
        requiresTransitive("com.fasterxml.jackson.annotation")
        requiresTransitive("com.fasterxml.jackson.core")
        requiresTransitive("com.fasterxml.jackson.databind")
        requiresTransitive("jakarta.annotation")
        requiresTransitive("java.management")
        requiresTransitive("java.naming")
        requiresTransitive("java.sql")
        requiresTransitive("org.apache.tomcat.embed.core")
        requiresTransitive("spring.beans")
        requiresTransitive("spring.boot")
        requiresTransitive("spring.context")
        requiresTransitive("spring.core")
        requiresTransitive("spring.jdbc")
        requiresTransitive("spring.tx")
        requiresTransitive("spring.web")
        requiresTransitive("spring.webmvc")
        requires("com.fasterxml.jackson.module.paramnames")
        requires("com.zaxxer.hikari")
        requires("java.compiler")
        requires("java.net.http")
        requires("org.apache.tomcat.embed.websocket")
        requires("spring.aop")
        requires("spring.jcl")
        opens("org.springframework.boot.autoconfigure", "spring.core")
        opens("org.springframework.boot.autoconfigure.aop", "spring.core")
        opens("org.springframework.boot.autoconfigure.batch", "spring.core")
        opens("org.springframework.boot.autoconfigure.cache", "spring.core")
        opens("org.springframework.boot.autoconfigure.condition", "spring.core")
        opens("org.springframework.boot.autoconfigure.context", "spring.core")
        opens("org.springframework.boot.autoconfigure.flyway", "spring.core")
        opens("org.springframework.boot.autoconfigure.http", "spring.core")
        opens("org.springframework.boot.autoconfigure.info", "spring.core")
        opens("org.springframework.boot.autoconfigure.integration", "spring.core")
        opens("org.springframework.boot.autoconfigure.jackson", "spring.core")
        opens("org.springframework.boot.autoconfigure.jdbc", "spring.core")
        opens("org.springframework.boot.autoconfigure.jdbc.metadata", "spring.core")
        opens("org.springframework.boot.autoconfigure.quartz", "spring.core")
        opens("org.springframework.boot.autoconfigure.session", "spring.core")
        opens("org.springframework.boot.autoconfigure.sql.init", "spring.core")
        opens("org.springframework.boot.autoconfigure.ssl", "spring.core")
        opens("org.springframework.boot.autoconfigure.task", "spring.core")
        opens("org.springframework.boot.autoconfigure.transaction", "spring.core")
        opens("org.springframework.boot.autoconfigure.web", "spring.core")
        opens("org.springframework.boot.autoconfigure.web.client", "spring.core")
        opens("org.springframework.boot.autoconfigure.web.servlet", "spring.core")
        opens("org.springframework.boot.autoconfigure.web.servlet.error", "spring.core")
        opens("org.springframework.boot.autoconfigure.websocket.servlet", "spring.core")
        exports("org.springframework.boot.autoconfigure")
        exports("org.springframework.boot.autoconfigure.admin")
        exports("org.springframework.boot.autoconfigure.amqp")
        exports("org.springframework.boot.autoconfigure.aop")
        exports("org.springframework.boot.autoconfigure.availability")
        exports("org.springframework.boot.autoconfigure.batch")
        exports("org.springframework.boot.autoconfigure.cache")
        exports("org.springframework.boot.autoconfigure.cassandra")
        exports("org.springframework.boot.autoconfigure.codec")
        exports("org.springframework.boot.autoconfigure.condition")
        exports("org.springframework.boot.autoconfigure.context")
        exports("org.springframework.boot.autoconfigure.couchbase")
        exports("org.springframework.boot.autoconfigure.dao")
        exports("org.springframework.boot.autoconfigure.data")
        exports("org.springframework.boot.autoconfigure.data.cassandra")
        exports("org.springframework.boot.autoconfigure.data.couchbase")
        exports("org.springframework.boot.autoconfigure.data.elasticsearch")
        exports("org.springframework.boot.autoconfigure.data.jdbc")
        exports("org.springframework.boot.autoconfigure.data.jpa")
        exports("org.springframework.boot.autoconfigure.data.ldap")
        exports("org.springframework.boot.autoconfigure.data.mongo")
        exports("org.springframework.boot.autoconfigure.data.neo4j")
        exports("org.springframework.boot.autoconfigure.data.r2dbc")
        exports("org.springframework.boot.autoconfigure.data.redis")
        exports("org.springframework.boot.autoconfigure.data.rest")
        exports("org.springframework.boot.autoconfigure.data.web")
        exports("org.springframework.boot.autoconfigure.diagnostics.analyzer")
        exports("org.springframework.boot.autoconfigure.domain")
        exports("org.springframework.boot.autoconfigure.elasticsearch")
        exports("org.springframework.boot.autoconfigure.flyway")
        exports("org.springframework.boot.autoconfigure.freemarker")
        exports("org.springframework.boot.autoconfigure.graphql")
        exports("org.springframework.boot.autoconfigure.graphql.data")
        exports("org.springframework.boot.autoconfigure.graphql.reactive")
        exports("org.springframework.boot.autoconfigure.graphql.rsocket")
        exports("org.springframework.boot.autoconfigure.graphql.security")
        exports("org.springframework.boot.autoconfigure.graphql.servlet")
        exports("org.springframework.boot.autoconfigure.groovy.template")
        exports("org.springframework.boot.autoconfigure.gson")
        exports("org.springframework.boot.autoconfigure.h2")
        exports("org.springframework.boot.autoconfigure.hateoas")
        exports("org.springframework.boot.autoconfigure.hazelcast")
        exports("org.springframework.boot.autoconfigure.http")
        exports("org.springframework.boot.autoconfigure.http.codec")
        exports("org.springframework.boot.autoconfigure.influx")
        exports("org.springframework.boot.autoconfigure.info")
        exports("org.springframework.boot.autoconfigure.integration")
        exports("org.springframework.boot.autoconfigure.jackson")
        exports("org.springframework.boot.autoconfigure.jdbc")
        exports("org.springframework.boot.autoconfigure.jdbc.metadata")
        exports("org.springframework.boot.autoconfigure.jersey")
        exports("org.springframework.boot.autoconfigure.jms")
        exports("org.springframework.boot.autoconfigure.jms.activemq")
        exports("org.springframework.boot.autoconfigure.jms.artemis")
        exports("org.springframework.boot.autoconfigure.jmx")
        exports("org.springframework.boot.autoconfigure.jooq")
        exports("org.springframework.boot.autoconfigure.jsonb")
        exports("org.springframework.boot.autoconfigure.kafka")
        exports("org.springframework.boot.autoconfigure.ldap")
        exports("org.springframework.boot.autoconfigure.ldap.embedded")
        exports("org.springframework.boot.autoconfigure.liquibase")
        exports("org.springframework.boot.autoconfigure.logging")
        exports("org.springframework.boot.autoconfigure.mail")
        exports("org.springframework.boot.autoconfigure.mongo")
        exports("org.springframework.boot.autoconfigure.mustache")
        exports("org.springframework.boot.autoconfigure.neo4j")
        exports("org.springframework.boot.autoconfigure.netty")
        exports("org.springframework.boot.autoconfigure.orm.jpa")
        exports("org.springframework.boot.autoconfigure.pulsar")
        exports("org.springframework.boot.autoconfigure.quartz")
        exports("org.springframework.boot.autoconfigure.r2dbc")
        exports("org.springframework.boot.autoconfigure.reactor")
        exports("org.springframework.boot.autoconfigure.reactor.netty")
        exports("org.springframework.boot.autoconfigure.rsocket")
        exports("org.springframework.boot.autoconfigure.security")
        exports("org.springframework.boot.autoconfigure.security.oauth2.client")
        exports("org.springframework.boot.autoconfigure.security.oauth2.client.reactive")
        exports("org.springframework.boot.autoconfigure.security.oauth2.client.servlet")
        exports("org.springframework.boot.autoconfigure.security.oauth2.resource")
        exports("org.springframework.boot.autoconfigure.security.oauth2.resource.reactive")
        exports("org.springframework.boot.autoconfigure.security.oauth2.resource.servlet")
        exports("org.springframework.boot.autoconfigure.security.oauth2.server.servlet")
        exports("org.springframework.boot.autoconfigure.security.reactive")
        exports("org.springframework.boot.autoconfigure.security.rsocket")
        exports("org.springframework.boot.autoconfigure.security.saml2")
        exports("org.springframework.boot.autoconfigure.security.servlet")
        exports("org.springframework.boot.autoconfigure.sendgrid")
        exports("org.springframework.boot.autoconfigure.service.connection")
        exports("org.springframework.boot.autoconfigure.session")
        exports("org.springframework.boot.autoconfigure.sql.init")
        exports("org.springframework.boot.autoconfigure.ssl")
        exports("org.springframework.boot.autoconfigure.task")
        exports("org.springframework.boot.autoconfigure.template")
        exports("org.springframework.boot.autoconfigure.thread")
        exports("org.springframework.boot.autoconfigure.thymeleaf")
        exports("org.springframework.boot.autoconfigure.transaction")
        exports("org.springframework.boot.autoconfigure.transaction.jta")
        exports("org.springframework.boot.autoconfigure.validation")
        exports("org.springframework.boot.autoconfigure.web")
        exports("org.springframework.boot.autoconfigure.web.client")
        exports("org.springframework.boot.autoconfigure.web.embedded")
        exports("org.springframework.boot.autoconfigure.web.format")
        exports("org.springframework.boot.autoconfigure.web.reactive")
        exports("org.springframework.boot.autoconfigure.web.reactive.error")
        exports("org.springframework.boot.autoconfigure.web.reactive.function.client")
        exports("org.springframework.boot.autoconfigure.web.servlet")
        exports("org.springframework.boot.autoconfigure.web.servlet.error")
        exports("org.springframework.boot.autoconfigure.webservices")
        exports("org.springframework.boot.autoconfigure.webservices.client")
        exports("org.springframework.boot.autoconfigure.websocket.reactive")
        exports("org.springframework.boot.autoconfigure.websocket.servlet")
    }
    module("org.springframework.boot:spring-boot-starter", "spring.boot.starter") {
        closeModule()
        requiresTransitive("jakarta.annotation")
        requiresTransitive("org.yaml.snakeyaml")
        requiresTransitive("spring.boot")
        requiresTransitive("spring.boot.autoconfigure")
        requiresTransitive("spring.boot.starter.logging")
        requiresTransitive("spring.core")
    }
    module("org.springframework.boot:spring-boot-starter-jdbc", "spring.boot.starter.jdbc") {
        closeModule()
        requiresTransitive("com.zaxxer.hikari")
        requiresTransitive("spring.boot.starter")
        requiresTransitive("spring.jdbc")
    }
    module("org.springframework.boot:spring-boot-starter-json", "spring.boot.starter.json") {
        closeModule()
        requiresTransitive("com.fasterxml.jackson.databind")
        requiresTransitive("com.fasterxml.jackson.datatype.jdk8")
        requiresTransitive("com.fasterxml.jackson.datatype.jsr310")
        requiresTransitive("com.fasterxml.jackson.module.paramnames")
        requiresTransitive("spring.boot.starter")
        requiresTransitive("spring.web")
    }
    module("org.springframework.boot:spring-boot-starter-logging", "spring.boot.starter.logging") {
        closeModule()
        requiresTransitive("ch.qos.logback.classic")
        requiresTransitive("jul.to.slf4j")
        requiresTransitive("org.apache.logging.log4j.to.slf4j")
    }
    module("org.springframework.boot:spring-boot-starter-tomcat", "spring.boot.starter.tomcat") {
        closeModule()
        requiresTransitive("jakarta.annotation")
        requiresTransitive("org.apache.tomcat.embed.core")
        requiresTransitive("org.apache.tomcat.embed.el")
        requiresTransitive("org.apache.tomcat.embed.websocket")
    }
    module("org.springframework.boot:spring-boot-starter-web", "spring.boot.starter.web") {
        closeModule()
        requiresTransitive("spring.boot.starter")
        requiresTransitive("spring.boot.starter.json")
        requiresTransitive("spring.boot.starter.tomcat")
        requiresTransitive("spring.web")
        requiresTransitive("spring.webmvc")
    }
}